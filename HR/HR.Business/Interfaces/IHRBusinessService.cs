using HR.Business.Models;
using HR.Entity;
using HR.Entity.Dto;
using HR.Entity.Interfaces;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace HR.Business.Interfaces
{
    public interface IHRBusinessService
    {
        // Mappers
        IEnumerable<AbsenceDay> AbsenceRangeToAbsenceDays(AbsenceRange absenceRange, WorkingPattern workingPattern, bool returnUnbookableDays = false);
        Absence AbsenceRangeToAbsence(AbsenceRange absenceRange, WorkingPattern workingPattern);
        AbsenceRange AbsenceToAbsenceRange(Absence absence);

        // Create
        PersonnelAbsenceEntitlement RemoveAbsenceFromPersonnelAbsenceEntitlementValues(Absence absence, PersonnelAbsenceEntitlement personnelAbsenceEntitlement);
        PersonnelAbsenceEntitlement AddAbsenceToPersonnelAbsenceEntitlementValues(Absence absence, PersonnelAbsenceEntitlement personnelAbsenceEntitlement);
        double CalculateDuration(IEnumerable<AbsenceDay> absenceDays);
        ValidationResult CreateAbsence(int organisationId, AbsenceRange absenceRange);
        ValidationResult<AbsencePeriod> CreateAbsencePeriod(int organisationId, AbsencePeriod absencePeriod);
        ValidationResult<AbsenceType> CreateAbsenceType(int organisationId, AbsenceType absenceType);
        ValidationResult<ApprovalLevelUser> CreateApprovalLevelUser(int organisationId, ApprovalLevelUser approvalLevelUser);
        ValidationResult<ApprovalModel> CreateApprovalModel(int organisationId, ApprovalModel approvalModel);
        Building CreateBuilding(int organisationId, Building building);
        ValidationResult<Company> CreateCompany(int organisationId, Company company);
        ValidationResult<Country> CreateCountry(int organisationId, Country country);
        ValidationResult<Department> CreateDepartment(int organisationId, Department department);
        EmergencyContact CreateEmergencyContact(int organisationId, EmergencyContact emergencyContact);
        Employment CreateEmployment(int organisationId, Employment employment, IEnumerable<WorkingPatternDay> workingPatternDays);
        Employment CreateEmployment(int organisationId, Employment employment, IEnumerable<WorkingPatternDay> workingPatternDays, List<int> departmentIds, List<int> teamIds);
        ValidationResult<EmploymentDepartment> CreateEmploymentDepartment(int organisationId, EmploymentDepartment employmentDepartment);
        ValidationResult<EmploymentTeam> CreateEmploymentTeam(int organisationId, EmploymentTeam employmentTeam);
        ValidationResult<Overtime> CreateOvertime(int organisationId, Overtime overtime);
        Personnel CreatePersonnel(int organisationId, Personnel personnel, Employment employment, bool overrideDefaultWorkingPattern, IEnumerable<WorkingPatternDay> workingPatternDays);
        ValidationResult<PersonnelApprovalModel> CreatePersonnelApprovalModel(int organisationId, PersonnelApprovalModel personnelApprovalModel);
        void UploadPhoto(int organisationId, int personnelId, byte[] photo);
        ValidationResult<EmploymentType> CreateEmploymentType(int organisationId, EmploymentType employmentType);
        void CreateOvertimeAdjustment(int organisationId, OvertimeSummary overtimeSummary, string createdBy, string comment);
        ValidationResult<Team> CreateTeam(int organisationId, Team team);
        ValidationResult<Site> CreateSite(int organisationId, Site site);
        ValidationResult<PublicHoliday> CreatePublicHoliday(int organisationId, PublicHoliday publicHoliday);

        AbsencePolicyPeriod CreateAbsencePolicyAbsencePeriod(int organisationId, AbsencePolicyPeriod absencePolicyPeriod);
        WorkingPattern CreateWorkingPatternDays(int organisationId, IEnumerable<WorkingPatternDay> workingPatternDays);
        ValidationResult<PublicHolidayPolicy> CreatePublicHolidayPolicy(int organisationId, PublicHolidayPolicy publicHolidayPolicy);
        CompanyBuilding CreateCompanyBuilding(int organisationId, int companyId, int buildingId);
        ValidationResult<AbsencePolicy> CreateAbsencePolicy(int organisationId, AbsencePolicy absencePolicy);
        AbsencePolicyEntitlement CreateAbsencePolicyEntitlement(int organisationId, int absencePolicyId, int absenceTypeId);
        ValidationResult<WorkingPattern> CreateAbsencePolicyWorkingPattern(int organisationId, AbsencePolicy absencePolicy, List<WorkingPatternDay> workingPatternDays);
        Personnel CreatePersonnel(int organisationId, Personnel personnel, Employment employment, IEnumerable<WorkingPatternDay> workingPatternDays, List<int> departmentIds, List<int> teamIds);
        ValidationResult<JobGrade> CreateJobGrade(int organisationId, JobGrade jobGrade);
        ValidationResult<JobTitle> CreateJobTitle(int organisationId, JobTitle jobTitle);
        JobTitleJobGrade CreateJobTitleJobGrade(int organisationId, int jobTitleId, int jobGradeId);
        void CreateJobTitleDocument(int organisationId, JobTitleDocument jobTitleDocument, string createdBy);

        // Retrieve
        bool CanApproveAbsence(int organisationId, int absenceId, bool isAdmin, string approverAspNetUserId);
        bool CanApproveOvertime(int organisationId, int overtimeId, bool isAdmin, string userId);
        bool CanDeleteAbsenceType(int organisationId, int absenecTypeId);
        bool CanDeleteAbsencePolicy(int organisationId, int absencePolicyId);
        bool CanDeleteCompany(int organisationId, int companyId);
        bool CanDeleteDepartment(int organisationId, int departmentId);
        bool CanDeleteApprovalModel(int organisationId, int approvalModelId);
        bool CanDeleteCountry(int organisationId, int countryId);
        bool CanDeleteBuilding(int organisationId, int buildingId);
        bool CanDeleteEmploymentType(int organisationId, int employmentTypeId);
        bool CanDeleteTeam(int organisationId, int teamId);
        bool CanDeleteSite(int organisationId, int siteId);
        bool CanDeleteAbsencePeriod(int organisationId, int absencePeriodId);
        bool CanDeleteCompanyBuilding(int organisationId, int companyId, int buildingId);
        bool CanDeleteJobGrade(int organisationId, int jobGradeId);
        bool CanDeleteJobTitle(int organisationId, int jobTitleId);
        bool IsManagerOfPersonnel(int organisationId, int userPersonnelId, int? personnelId = null);
        bool CanDeletePersonnelEmployment(int organisationId, int personnelId, int employmentId);
        bool IsAbsencesAssignedToAbsencePolicyAbsenceType(int organisationId, int absencePolicyId, int absenceTypeId);
        bool IsAbsencesAssignedToAbsencePolicyPeriod(int organisationId, int absencePolicyPeriodId);
        bool AbsencePolicyPersonnelEmploymentHasAbsences(int organisationId, int employmentId, int absencePolicyId);
        bool CanDeleteJobTitleDocument(int organisationId, int jobTitleDocumentId);
        bool CanDeleteJobTitleJobGrade(int organisationId, int jobTitleId, int jobGradeId);

        AbsenceRange RetrieveAbsenceRange(int organisationId, int absenceId);
        AbsenceRequest RetrieveAbsenceRequest(int organisationId, AbsenceRange absenceRange);
        IEnumerable<INotAbsenceDay> RetrieveCannotBeBookedDays(AbsenceRange absenceRange, WorkingPattern workingPattern);
        PagedResult<Absence> RetrieveAbsences(int organisationId, ApprovalFilter approvalFilter, List<OrderBy> orderBy, Paging paging);
        PagedResult<AbsenceForApproval> RetrieveAbsenceForApprovals(int organisationId, string approverAspNetUserId, bool isAdmin, List<OrderBy> orderBy, Paging paging);
        IEnumerable<AbsenceRange> RetrieveAbsences(int organisationId, int personnelId, int absencePeriodId, bool isAdmin);
        Schedule RetrieveAbsenceSchedule(int organisationId, DateTime beginDate, DateTime endDate, Permissions permission, int personnelId, PersonnelFilter personnelFilter, int showColourBy, string approverAspNetUserId);
        List<Slot> RetrieveAbsenceSlots(IEnumerable<Absence> absences, DateTime beginDate, DateTime endDate);
        IEnumerable<AbsenceSlot> RetrieveAbsenceSlots(Absence absence, DateTime beginDate, DateTime endDate);
        AbsencePeriod RetrieveAbsencePeriod(int organisationId, int absencePeriodId);
        PagedResult<AbsencePeriod> RetrieveAbsencePeriods(int organisationId, List<OrderBy> orderBy, Paging paging);
        AbsenceType RetrieveAbsenceType(int organisationId, int absenceTypeId);
        PagedResult<AbsenceType> RetrieveAbsenceTypes(int organisationId, List<OrderBy> orderBy, Paging paging);
        IEnumerable<ApprovalLevel> RetrieveApprovalLevels(int organisationId, int approvalModelId);
        IEnumerable<ApprovalEntityTypeAssignment> ApprovalEntityTypeAssignments(int organisationId, int personnelId);
        ApprovalModel RetrieveApprovalModel(int organisationId, int approvalModelId);
        IEnumerable<ApprovalModel> RetrieveApprovalModels(int organisationId);
        PagedResult<ApprovalModel> RetrieveApprovalModels(int organisationId, List<OrderBy> orderBy, Paging paging);
        IEnumerable<ApprovalUser> RetrieveAvailableApprovalUsers(int organisationId, int approvalLevelId);
        IEnumerable<ApprovalUser> RetrieveApprovalUsers(int organisationId, int approvalLevelId);
        Building RetrieveBuilding(int organisationId, int id);
        Country RetrieveCountry(int organisationId, int countryId);
        IEnumerable<Building> RetrieveBuildings(int organisationId);
        PagedResult<Building> RetrieveBuildings(int organisationId, List<OrderBy> orderBy, Paging paging);
        IEnumerable<Colour> RetrieveColours();
        Company RetrieveCompany(int organisationId, int id);
        PagedResult<Company> RetrieveCompanies(int organisationId, List<OrderBy> orderBy, Paging paging);
        PersonnelDetailFilter RetrievePersonnelDetailFilters(int organisationId, int personnelId, bool isAdmin);
        PagedResult<Country> RetrieveCountries(int organisationId, List<OrderBy> orderBy, Paging paging);
        IEnumerable<WorkingPatternDay> RetrieveDefaultWorkingPatternDays();
        Department RetrieveDepartment(int organisationId, int id);
        IEnumerable<Department> RetrieveDepartments(int organisationId);
        PagedResult<Department> RetrieveDepartments(int organisationId, List<OrderBy> orderBy, Paging paging);
        IEnumerable<DepartmentFilter> RetrieveDepartmentFilters(int organisationId);
        string RetrievePhoto(int organisationId, int personnelId);
        IEnumerable<Node<Employment>> RetrieveEmploymentsTree(int organisationId);
        EmergencyContact RetrieveEmergencyContact(int organisationId, int id);
        IEnumerable<EmergencyContact> RetrieveEmergencyContactsbyPersonnelId(int organisationId, int personnelId);
        IEnumerable<Absence> RetrieveManagerAbsencesRequiringApproval(int organisationId, List<int> personnelIds);
        Organisation RetrieveOrganisation(int organisationId);
        OrganisationalChart RetrieveOrganisationalChart(int organisationId, int personnelId, Permissions permission, PersonnelFilter personnelFilter, int showColourBy);
        IEnumerable<Employment> RetrievePersonnelEmployments(int organisationId, int personnelId);
        IEnumerable<OvertimePreference> RetrieveOvertimePreferences(int organisationId);
        Personnel RetrievePersonnel(int organisationId, int id);
        PagedResult<Personnel> RetrievePersonnel(int organisationId, List<OrderBy> orderBy, Paging paging);
        IEnumerable<AbsencePeriod> RetrievePersonnelAbsencePeriods(int organisationId, int personnelId);
        IEnumerable<PersonnelAbsenceEntitlement> RetrievePersonnelCurrentAbsenceEntitlements(int organisationId, int personnelId, int employmentId);
        PersonnelAbsenceEntitlement RetrievePersonnelAbsenceEntitlement(int organisationId, AbsenceRange absenceRange, int employmentId);
        IEnumerable<PersonnelApprovalModel> RetrievePersonnelApprovalModels(int organisationId, int personnelId);
        PersonnelAbsenceEntitlement RetrievePersonnelAbsenceEntitlement(int organisationId, int personnelId, int personnelCurrentAbsenceEntitlementId);
        IEnumerable<PersonnelAbsenceEntitlement> RetrievePersonnelAbsenceEntitlements(int organisationId, int personnelId, int absencePeriodId);
        PagedResult<PersonnelSearchField> RetrievePersonnelBySearchKeyword(int organisationId, string searchKeyword, List<OrderBy> orderBy = null, Paging paging = null);
        Employment RetrievePersonnelCurrentEmployment(int organisationId, int personnelId);
        IEnumerable<Personnel> RetrievePersonnelChildrenPersonnel(int organisationId, int personnelId);
        IEnumerable<Company> RetrievePersonnelDescendantCompanies(int organisationId, int personnelId);
        Employment RetrievePersonnelEmployment(int organisationId, int personnelId, int employmentId);
        PagedResult<EmploymentType> RetrieveEmploymentType(int organisationId, List<OrderBy> orderBy, Paging paging);
        Overtime RetrieveOvertime(int organisationId, int overtimeId);
        PagedResult<Overtime> RetrieveOvertimes(int organisationId, int personnelId, List<OrderBy> orderBy, Paging paging);
        PagedResult<Overtime> RetrieveOvertimes(int organisationId, OvertimeFilter overtimeFilter, List<OrderBy> orderBy, Paging paging);
        OvertimeForApproval RetrieveOvertimeForApprovals(int organisationId, int overtimeId, string approverAspNetUserId, bool isAdmin);
        PagedResult<OvertimeForApproval> RetrieveOvertimeForApprovals(int organisationId, string approverAspNetUserId, bool isAdmin, List<OrderBy> orderBy, Paging paging);
        OvertimeSummary RetrieveOvertimeSummary(int organisationId, int personnelId);
        PagedResult<OvertimeSummary> RetrieveOvertimeSummaries(int organisationId, IEnumerable<int> companyIds, IEnumerable<int> departmentIds, IEnumerable<int> teamIds, List<OrderBy> orderBy, Paging paging);
        EmploymentType RetrieveEmploymentType(int organisationId, int employmentTypeId);
        IEnumerable<EmploymentType> RetrieveEmploymentTypes(int organisationId);
        IEnumerable<EmploymentDepartment> RetrieveEmploymentDepartments(int organisationId, int employmentId);
        IEnumerable<EmploymentTeam> RetrieveEmploymentTeams(int organisationId, int employmentId);
        Node<Employment> RetrievePersonnelEmploymentNode(int organisationId, int personnelId);
        Permissions RetrievePersonnelPermissions(bool isAdmin, int organisationId, int userPersonnelId, int? personnelId = null);
        WorkingPattern RetrievePersonnelWorkingPattern(int organisationId, int personnelId);
        IEnumerable<Personnel> RetrieveReportsToPersonnel(int organisationId, int personnelId);
        Team RetrieveTeam(int organisationId, int id);
        PagedResult<Team> RetrieveTeam(int organisationId, List<OrderBy> orderBy, Paging paging);
        IEnumerable<Site> RetrieveSites(int organisationId);
        IEnumerable<TeamFilter> RetrieveTeamFilters(int organisationId);
        Site RetrieveSite(int organisationId, int id);
        PagedResult<Site> RetrieveSites(int organisationId, List<OrderBy> orderBy, Paging paging);
        IAuthorisation RetrieveUserAuthorisation(string aspNetUserId);
        PagedResult<PublicHolidayPolicy> RetrievePublicHolidayPolicies(int organisationId, List<OrderBy> orderBy, Paging paging);
        PublicHolidayPolicy RetrievePublicHolidayPolicy(int organisationId, int publicHolidayPolicyId);
        IEnumerable<CompanyBuilding> RetrieveCompanyBuilding(int organisationId, int companyId);
        IEnumerable<CompanyBuilding> RetrieveEmploymentCompanyBuilding(int organisationId);
        IEnumerable<Building> RetrieveBuildingsSitesUnassignedCompany(int organisationId, int companyId);
        PagedResult<AbsencePolicy> RetrieveAbsencePolicies(int organisationId, List<OrderBy> orderBy, Paging paging);
        IEnumerable<AbsenceType> RetrieveUnassignedAbsencePolicyAbsenceTypes(int organisationId, int absencePolicyId);
        PagedResult<AbsencePolicyEntitlement> RetrieveAbsencePolicyEntitlements(int organisationId, int absencePolicyId, List<OrderBy> orderBy = null, Paging paging = null);
        AbsencePolicyEntitlement RetrieveAbsencePolicyEntitlement(int organisationId, int absencePolicyEntitlementId);
        AbsencePolicy RetrieveAbsencePolicy(int organisationId, int absencePolicyId);
        PagedResult<AbsencePolicyPeriod> RetrieveAbsencePolicyAbsencePeriods(int organisationId, int absencePolicyId, List<OrderBy> orderBy, Paging paging);
        IEnumerable<AbsencePeriod> RetrieveUnassignedAbsencePolicyPeriods(int organisationId, int absencePolicyId);
        List<int> RetrievePublicHolidayYear(int organisationId, int publicHolidayPolicyId);
        PagedResult<PublicHoliday> RetrievePublicHolidays(int organisationId, int publicHolidayPolicyId, int year, List<OrderBy> orderBy, Paging paging);
        IEnumerable<AbsencePolicy> RetrieveAbsencePolices(int organisationId);
        IEnumerable<PublicHolidayPolicy> RetrievePublicHolidayPolices(int organisationId);
        JobGrade RetrieveJobGrade(int organisationId, int id);
        IEnumerable<JobGrade> RetrieveUnassignedJobGrades(int organisationId, int jobGradeId);
        PagedResult<JobGrade> RetrieveJobGrade(int organisationId, List<OrderBy> orderBy, Paging paging);
        Employment RetrieveEmployment(int organisationId, int personnelId, DateTime dateTimeNow);
        IEnumerable<EmploymentPersonnelAbsenceEntitlement> RetrieveEmploymentPersonnelAbsenceEntitlements(int organisationId, Expression<Func<EmploymentPersonnelAbsenceEntitlement, bool>> predicate);
        JobTitle RetrieveJobTitle(int organisationId, int id);
        PagedResult<JobTitle> RetrieveJobTitle(int organisationId, List<OrderBy> orderBy, Paging paging);
        PagedResult<JobGrade> RetrieveJobTitleJobGrade(int organisationId, int jobGradeId, List<OrderBy> orderBy = null, Paging paging = null);
        JobTitleDocument RetrieveJobTitleDocument(int organisationId, Guid documentDetailGuid);
        PagedResult<JobTitleDocument> RetrieveJobTitleDocuments(int organisationId, int jobTitleId, Paging paging);
        IEnumerable<JobTitleJobGrade> RetrieveJobTitleJobGrade(int organisationId);
        IEnumerable<AbsenceType> RetrieveAbsenceTypes(int organisationId, int absencePolicyId);
        WorkingPattern RetrieveWorkingPattern(int organisationId, int workingPatternId);
        IEnumerable<CanBeBookedAbsenceDay> RetrieveAlreadyBookedAbsencesExcludingCurrentAbsence(AbsenceRange absenceRange);
        IEnumerable<AbsencePolicyPeriod> RetrieveAbsencePolicyAbsencePeriodsByPersonnel(int organisationId, int personnelId);
        // Update
        void ApproveAbsence(int organisationId, int absenceId, string userId, bool isAdmin);
        void ApproveAbsence(int organisationId, Absence absence, string approverAspNetUserId, bool isAdmin);
        void DeclineAbsence(int organisationId, int absenceId, string userId, bool isAdmin);
        void DeclineAbsence(int organisationId, Absence absence, string approverAspNetUserId, bool isAdmin);
        ValidationResult UpdateAbsence(int organisationId, AbsenceRange absenceRange);
        ValidationResult<AbsencePeriod> UpdateAbsencePeriod(int organisationId, AbsencePeriod absencePeriod);
        ValidationResult<AbsenceType> UpdateAbsenceType(int organisationId, AbsenceType absenceType);
        ValidationResult<ApprovalModel> UpdateApprovalModel(int organisationId, ApprovalModel approvalModel);
        Building UpdateBuilding(int organisationId, Building building);
        ValidationResult<Company> UpdateCompany(int organisationId, Company company);
        ValidationResult<Country> UpdateCountry(int organisationId, Country country);
        ValidationResult<Department> UpdateDepartment(int organisationId, Department department);
        EmergencyContact UpdateEmergencyContact(int organisationId, EmergencyContact emergencyContact);
        Employment UpdateEmployment(int organisationId, Employment employment,int previousAbsencePolicyId,IEnumerable<WorkingPatternDay> workingPatternDays, List<int> departmentIds, List<int> teamIds);
        ValidationResult<Employment> UpdateEmploymentEndDate(int organisationId, Employment employment);
        ValidationResult<EmploymentType> UpdateEmploymentType(int organisationId, EmploymentType employmentType);
        Overtime UpdateOvertime(int organisationId, Overtime overtime);
        Personnel UpdatePersonnel(int organisationId, Personnel personnel);
        ValidationResult<PersonnelAbsenceEntitlement> UpdatePersonnelAbsenceEntitlement(int id, PersonnelAbsenceEntitlement entitlement);
        ValidationResult<PersonnelApprovalModel> UpdatePersonnelApprovalModel(int organisationId, PersonnelApprovalModel personnelPersonnelApprovalModel);
        void ApproveOvertime(int organisationId, int overtimeId, string userId, bool isAdmin);
        void ApproveOvertime(int organisationId, Overtime overtime, string approverAspNetUserId, bool isAdmin);
        void DeclineOvertime(int organisationId, int overtimeId, string userId, bool isAdmin);
        void DeclineOvertime(int organisationId, Overtime overtime, string approverAspNetUserId, bool isAdmin);
        ValidationResult<Team> UpdateTeam(int organisationId, Team division);
        ValidationResult<Site> UpdateSite(int organisationId, Site site);
        AbsencePolicyEntitlement UpdateAbsencePolicyEntitlement(int organisationId, AbsencePolicyEntitlement absencePolicyEntitlement);
        ValidationResult<WorkingPattern> UpdateAbsencePolicy(int organisationId, AbsencePolicy absencePolicy, List<WorkingPatternDay> workingPatternDays);
        ValidationResult<PublicHolidayPolicy> UpdatePublicHolidayPolicy(int organisationId, PublicHolidayPolicy publicHolidayPolicy);
        ValidationResult<JobGrade> UpdateJobGrade(int organisationId, JobGrade jobGrade);
        ValidationResult<JobTitle> UpdateJobTitle(int organisationId, JobTitle jobTitle);
        ValidationResult<PublicHoliday> UpdatePublicHoliday(int organisationId, PublicHoliday publicHoliday);
        // Delete
        void DeleteAbsence(int organisationId, int absenceId);
        void DeleteAbsencePeriod(int organisationId, int absencePeriodId);
        void DeleteAbsenceType(int organisationId, int absenceTypeId);
        void DeleteApprovalLevelUser(int organisationId, int approvalLevelUserId);
        void DeleteApprovalModel(int organisationId, int approvalModelId);
        void DeleteBuilding(int organisationId, int buildingId);
        void DeleteCompany(int organisationId, int companyId);
        void DeleteCountry(int organisationId, int countryId);
        void DeleteDepartment(int organisationId, int departmentId);
        void DeleteEmergencyContact(int organisationId, int emergencyContactId);
        void DeletePersonnel(int organisationId, int personnelId);
        void DeletePersonnelApprovalModel(int organisationId, int personnelApprovalModelId);
        void DeleteEmploymentDepartment(int organisationId, int employmentId, int departmentId);
        void DeleteEmploymentTeam(int organisationId, int employmentId, int teamId);
        void DeleteEmploymentTeam(int organisationId, int employmentTeamId);
        void DeleteEmploymentType(int organisationId, int employmentTypeId);
        void DeleteOvertime(int organisationId, int overtimeId);
       // void DeletePhoto(int organisationId, int personnelId);
        void DeleteTeam(int organisationId, int teamId);
        void DeleteSite(int organisationId, int siteId);
        void DeleteWorkingPattern(int organisationId, int workingPatternId);
        void DeletePersonnelEmployment(int organisationId, int personnelId, int employmentId);
        bool CanDeletePublicHolidayPolicy(int organisationId, int publicHolidayPolicyId);
        void DeleteCompanyBuilding(int organisationId, int companyBuildingId);
        void DeleteAbsencePolicy(int organisationId, int id);
        void DeletePublicHoliday(int organisationId, int publicHolidayId);
        void DeletePublicHolidayPolicy(int organisationId, int publicHolidayPolicyId);
        void DeleteAbsencePolicyPeriod(int organisationId, int absencePolicyPeriodId);
        void DeleteAbsencePolicyAbsenceType(int organisationId, int absencePolicyId, int absenceTypeId);
        void DeleteJobGrade(int organisationId, int jobGradeId);
        void DeleteJobTitle(int organisationId, int jobTitleId);
        void DeleteJobTitleJobGrade(int organisationId, int jobTitleId, int jobGradeId);
        void DeleteJobTitleDocument(int organisationId, Guid documentDetailGuid);

        // Validate
        ValidationResult ValidateAbsence(int organisationId, AbsenceRange absenceRange);
        ValidationResult<Employment> ValidateEmployment(Employment employment);
        //Clone
        PublicHolidayPolicy ClonePublicHolidayPolicy(int organisationId, int publicHolidayPolicyId);
        AbsencePolicy CloneAbsencePolicy(int organisationId, int absencePolicyId);
    }
}
